# coding: utf-8

"""
    PUBLIC - VVCLI Restfull API

    The public API allows users to authenticate to access accounts and contracts, as well as manage Object Storage contracts. With a focus on creating S3 credentials for users and sub-users, the solution simplifies resource management by providing an integrated and intuitive experience.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from vvcli_sdk.models.credential_key import CredentialKey
from vvcli_sdk.models.user_quota_obj_storage_schema import UserQuotaObjStorageSchema
from vvcli_sdk.models.user_usage_obj_storage_schema import UserUsageObjStorageSchema
from typing import Optional, Set
from typing_extensions import Self


class NewUserObjStorageSchema(BaseModel):
    """
    NewUserObjStorageSchema
    """  # noqa: E501

    client_id: StrictStr = Field(alias="clientId")
    contract_key: StrictStr = Field(alias="contractKey")
    quota: Optional[UserQuotaObjStorageSchema] = None
    usage: Optional[UserUsageObjStorageSchema] = None
    keys: Optional[List[CredentialKey]] = None
    __properties: ClassVar[List[str]] = [
        "clientId",
        "contractKey",
        "quota",
        "usage",
        "keys",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewUserObjStorageSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict["quota"] = self.quota.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict["usage"] = self.usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in keys (list)
        _items = []
        if self.keys:
            for _item_keys in self.keys:
                if _item_keys:
                    _items.append(_item_keys.to_dict())
            _dict["keys"] = _items
        # set to None if quota (nullable) is None
        # and model_fields_set contains the field
        if self.quota is None and "quota" in self.model_fields_set:
            _dict["quota"] = None

        # set to None if usage (nullable) is None
        # and model_fields_set contains the field
        if self.usage is None and "usage" in self.model_fields_set:
            _dict["usage"] = None

        # set to None if keys (nullable) is None
        # and model_fields_set contains the field
        if self.keys is None and "keys" in self.model_fields_set:
            _dict["keys"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewUserObjStorageSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "clientId": obj.get("clientId"),
                "contractKey": obj.get("contractKey"),
                "quota": (
                    UserQuotaObjStorageSchema.from_dict(obj["quota"])
                    if obj.get("quota") is not None
                    else None
                ),
                "usage": (
                    UserUsageObjStorageSchema.from_dict(obj["usage"])
                    if obj.get("usage") is not None
                    else None
                ),
                "keys": (
                    [CredentialKey.from_dict(_item) for _item in obj["keys"]]
                    if obj.get("keys") is not None
                    else None
                ),
            }
        )
        return _obj
